import pandas as pd
import psycopg2
from psycopg2.extras import execute_values
import re
from typing import Optional, Dict, Tuple
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MobileDataImporter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ PostgreSQL —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    
    def __init__(self, db_config: Dict[str, str]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–µ—Ä–∞
        
        Args:
            db_config: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        """
        self.db_config = db_config
        self.conn = None
        self.cursor = None
        self.company_cache = {}
        self.processor_cache = {}
        self.region_cache = {}
    
    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        try:
            self.conn = psycopg2.connect(**self.db_config)
            self.cursor = self.conn.cursor()
            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise
    
    def disconnect(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ")
    
    def parse_price(self, price_str: str) -> Optional[float]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ —Å —Ü–µ–Ω–æ–π
        
        Args:
            price_str: –°—Ç—Ä–æ–∫–∞ —Å —Ü–µ–Ω–æ–π (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –≤–∞–ª—é—Ç—ã)
            
        Returns:
            –ß–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏–ª–∏ None
        """
        if pd.isna(price_str) or price_str == '':
            return None
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
        price_str = str(price_str)
        price_clean = re.sub(r'[^\d.]', '', price_str)
        
        try:
            return float(price_clean) if price_clean else None
        except ValueError:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ü–µ–Ω—É: {price_str}")
            return None
    
    def get_or_create_company(self, company_name: str) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if company_name in self.company_cache:
            return self.company_cache[company_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        self.cursor.execute(
            "SELECT company_id FROM companies WHERE company_name = %s",
            (company_name,)
        )
        result = self.cursor.fetchone()
        
        if result:
            company_id = result[0]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é
            self.cursor.execute(
                "INSERT INTO companies (company_name) VALUES (%s) RETURNING company_id",
                (company_name,)
            )
            company_id = self.cursor.fetchone()[0]
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è: {company_name}")
        
        self.company_cache[company_name] = company_id
        return company_id
    
    def get_or_create_processor(self, processor_name: str) -> Optional[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞"""
        if pd.isna(processor_name) or processor_name == '':
            return None
            
        if processor_name in self.processor_cache:
            return self.processor_cache[processor_name]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        self.cursor.execute(
            "SELECT processor_id FROM processors WHERE processor_name = %s",
            (processor_name,)
        )
        result = self.cursor.fetchone()
        
        if result:
            processor_id = result[0]
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            self.cursor.execute(
                "INSERT INTO processors (processor_name) VALUES (%s) RETURNING processor_id",
                (processor_name,)
            )
            processor_id = self.cursor.fetchone()[0]
            logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {processor_name}")
        
        self.processor_cache[processor_name] = processor_id
        return processor_id
    
    def load_regions(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤ –≤ –∫—ç—à"""
        self.cursor.execute("SELECT region_id, region_name FROM regions")
        for region_id, region_name in self.cursor.fetchall():
            self.region_cache[region_name] = region_id
        logger.info(f"üìç –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–≥–∏–æ–Ω–æ–≤: {len(self.region_cache)}")
    
    def import_data(self, csv_path: str):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            csv_path: –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        """
        logger.info(f"üìÇ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞: {csv_path}")
        
        # –ß–∏—Ç–∞–µ–º CSV
        df = pd.read_csv(csv_path, encoding='cp1252')
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
        self.load_regions()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
        models_count = 0
        prices_count = 0
        
        for idx, row in df.iterrows():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                company_id = self.get_or_create_company(row['Company Name'])
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
                processor_id = self.get_or_create_processor(row['Processor'])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                self.cursor.execute(
                    """SELECT model_id FROM models 
                       WHERE model_name = %s AND company_id = %s""",
                    (row['Model Name'], company_id)
                )
                existing_model = self.cursor.fetchone()
                
                if existing_model:
                    model_id = existing_model[0]
                else:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
                    self.cursor.execute(
                        """INSERT INTO models 
                           (model_name, company_id, processor_id, mobile_weight, 
                            ram, front_camera, back_camera, battery_capacity, 
                            screen_size, launched_year)
                           VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                           RETURNING model_id""",
                        (
                            row['Model Name'],
                            company_id,
                            processor_id,
                            row['Mobile Weight'] if pd.notna(row['Mobile Weight']) else None,
                            row['RAM'] if pd.notna(row['RAM']) else None,
                            row['Front Camera'] if pd.notna(row['Front Camera']) else None,
                            row['Back Camera'] if pd.notna(row['Back Camera']) else None,
                            row['Battery Capacity'] if pd.notna(row['Battery Capacity']) else None,
                            row['Screen Size'] if pd.notna(row['Screen Size']) else None,
                            int(row['Launched Year']) if pd.notna(row['Launched Year']) else None
                        )
                    )
                    model_id = self.cursor.fetchone()[0]
                    models_count += 1
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
                price_columns = [
                    ('Pakistan', 'Launched Price (Pakistan)'),
                    ('India', 'Launched Price (India)'),
                    ('China', 'Launched Price (China)'),
                    ('USA', 'Launched Price (USA)'),
                    ('Dubai', 'Launched Price (Dubai)')
                ]
                
                for region_name, price_column in price_columns:
                    price = self.parse_price(row[price_column])
                    if price is not None:
                        region_id = self.region_cache[region_name]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã
                        self.cursor.execute(
                            """SELECT price_id FROM prices 
                               WHERE model_id = %s AND region_id = %s""",
                            (model_id, region_id)
                        )
                        
                        if not self.cursor.fetchone():
                            self.cursor.execute(
                                """INSERT INTO prices (model_id, region_id, price)
                                   VALUES (%s, %s, %s)""",
                                (model_id, region_id, price)
                            )
                            prices_count += 1
                
                # –ö–æ–º–º–∏—Ç–∏–º –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø–∏—Å–µ–π
                if (idx + 1) % 100 == 0:
                    self.conn.commit()
                    logger.info(f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {idx + 1}")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ {idx}: {e}")
                self.conn.rollback()
                continue
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
        self.conn.commit()
        logger.info(f"""
        ‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!
        üì± –î–æ–±–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ–ª–µ–π: {models_count}
        üí∞ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ü–µ–Ω: {prices_count}
        üè¢ –ö–æ–º–ø–∞–Ω–∏–π –≤ –ë–î: {len(self.company_cache)}
        üîß –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –≤ –ë–î: {len(self.processor_cache)}
        """)


# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    db_config = {
        'host': 'localhost',
        'port': 5432,
        'database': 'mobile_devices_db',
        'user': 'admin',
        'password': 'password'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
    }
    
    # –°–æ–∑–¥–∞–µ–º –∏–º–ø–æ—Ä—Ç–µ—Ä –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç
    importer = MobileDataImporter(db_config)
    
    try:
        importer.connect()
        importer.import_data('Mobiles Dataset 2025.csv')  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É
    finally:
        importer.disconnect()